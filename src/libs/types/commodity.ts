
import { z } from "zod";
import { error_info, makeInfo } from "./error_info";

export let zodCommodity = z.object({
  density: z.number().optional().nullable(),
  length: z.number().min(10).max(90),
  width: z.number().min(10).max(90),
  height: z.number().min(10).max(90),
  weight: z.number().min(50).max(10000),
  dimension_uom: z.number(),
  frontend_dimension_uom: z.string().optional().nullable(),
  weight_uom: z.number(),
  frontend_weight_uom: z.string().optional().nullable(),
  dimension_display: z.string().optional().nullable(),
  package_type: z.number(),
  frontend_package_type: z.string().optional().nullable(),
  quantity: z.number(),
  freight_class: z.number(),
  frontend_freight_class: z.string().optional().nullable(),
  stackable: z.boolean(),
  protect_from_freeze: z.boolean(),
  sort_and_segregate: z.boolean(),
  guaranteed: z.boolean(),
  hazardous: z.boolean(),
  commodity_instructions: z.string().optional().nullable(),
  commodity_services: z.array(z.number()).optional().nullable(),
  index: z.number(),
  shipment_description: z.string(),
  type: z.string().optional().nullable(),
  quote_id: z.string(),
  length_error: error_info,
  width_error:  error_info,
  height_error:  error_info,
  weight_error:  error_info,
  quantity_error:  error_info,
  shipment_description_error: error_info,
  freight_class_error: error_info,
  weight_uom_error: error_info,
  dimension_uom_error: error_info,
  commodity_service_error: error_info,
  getLengthErrorID: z.function().returns(z.string()),
  

})
export type zodCommodityType = z.infer<typeof zodCommodity>
export function newCommodity(index: number): zodCommodityType{
  if (import.meta.env.VITE_ENV === 'dev') {
    let commodity: zodCommodityType = {
      density: null,
      length: 48,
      width: 40,
      height: 75,
      weight: 800,
      dimension_uom: 0,
      frontend_dimension_uom: "INCH",
      weight_uom: 0,
      frontend_weight_uom: "LB",
      dimension_display: "",
      package_type: 5,
      frontend_package_type: "PALLET",
      quantity: 1,
      freight_class: 0,
      frontend_freight_class: "CLASS70",
      stackable: false,
      protect_from_freeze: false,
      sort_and_segregate: false,
      guaranteed: false,
      hazardous: false,
      commodity_instructions: "",
      commodity_services: [],
      index: index,
      shipment_description: "novelties",
      type: "",
      quote_id: "",
      
      length_error: makeInfo({ valid: true, id: `commodities_${index}_length_error`, clas: "firstshipper_errors", "path": `commodities_${index}_length_error`, error_message: "length is not valid"}),
      width_error: makeInfo({ valid: true, id: `commodities_${index}_width_error`, clas: "firstshipper_errors", "path": `commodities_${index}_width_error`, error_message: "width is not valid" }),
      height_error: makeInfo({ valid: true, id: `commodities_${index}_height_error`, clas: "firstshipper_errors", "path": `commodities_${index}_height_error`, error_message: "height is not valid" }),
      weight_error: makeInfo({ valid: true, id: `commodities_${index}_weight_error`, clas: "firstshipper_errors", "path": `commodities_${index}_weight_error`, error_message: "width is not valid" }),
      quantity_error: makeInfo({ valid: true, id: `commodities_${index}_quantity_error`, clas: "firstshipper_errors", "path": `commodities_${index}_quantity_error`, error_message: "quantity is not valid"}),
      shipment_description_error: makeInfo({ valid: true, id: `commodities_${index}_shipment_description_error`, clas: "firstshipper_errors", "path": `commodities_${index}_shipment_description_error`, error_message: "shipment description is required" }),
      freight_class_error: makeInfo({ valid: true, id: `commodities_${index}_freight_class_error`, clas: "firstshipper_errors", "path": `commodities_${index}_freight_class_error`, error_message:"freight class is required" }),
      weight_uom_error: makeInfo({ valid: true, id: `commodities_${index}_weight_uom_error`, clas: "firstshipper_errors", "path": `commodities_${index}_weight_uom_error`, error_message: "weight unit of measurement is required" }),
      dimension_uom_error: makeInfo({ valid: true, id: `commodities_${index}_dimension_uom_error`, clas: "firstshipper_errors", "path": `commodities_${index}_dimension_uom_error`, error_message: "dimension unit of measurement is required" }),
      commodity_service_error: makeInfo({ valid: true, id: `commodities_${index}_commodity_service_error`, clas: "firstshipper_errors", "path": `commodities_${index}_commodity_service_error` , error_message : "please select commodities services required for shipment"}),
      getLengthErrorID: () => `commodities_${index}_length_error`

    }
    return commodity
  }
  let commodity: zodCommodityType = {
    density: null,
    length: 0,
    width: 0,
    height: 0,
    weight: 0,
    dimension_uom: 0,
    frontend_dimension_uom: "INCH",
    weight_uom: 0,
    frontend_weight_uom: "LB",
    dimension_display: "",
    package_type: 0,
    frontend_package_type: "PALLET",
    quantity: 0,
    freight_class: 0,
    frontend_freight_class: "CLASS70",
    stackable: false,
    protect_from_freeze: false,
    sort_and_segregate: false,
    guaranteed: false,
    hazardous: false,
    commodity_instructions: "",
    commodity_services: [],
    index: index,
    shipment_description: "",
    type: "",
    quote_id: "",
    length_error: makeInfo({ valid: true, id: `commodities_${index}_length_error`, clas: "firstshipper_errors", "path": `commodities_${index}_length_error`, error_message: "lenth is not valid"}),
    width_error: makeInfo({ valid: true, id: `commodities_${index}_width_error`, clas: "firstshipper_errors", "path": `commodities_${index}_width_error`, error_message: "width is not valid" }),
    height_error: makeInfo({ valid: true, id: `commodities_${index}_height_error`, clas: "firstshipper_errors", "path": `commodities_${index}_height_error`, error_message: "height is not valid" }),
    weight_error: makeInfo({ valid: true, id: `commodities_${index}_weight_error`, clas: "firstshipper_errors", "path": `commodities_${index}_weight_error`, error_message: "width is not valid" }),
    quantity_error: makeInfo({ valid: true, id: `commodities_${index}_quantity_error`, clas: "firstshipper_errors", "path": `commodities_${index}_quantity_error`, error_message: "quantity is not valid"}),
    shipment_description_error: makeInfo({ valid: true, id: `commodities_${index}_shipment_description_error`, clas: "firstshipper_errors", "path": `commodities_${index}_shipment_description_error`, error_message: "shipment description is required" }),
    freight_class_error: makeInfo({ valid: true, id: `commodities_${index}_freight_class_error`, clas: "firstshipper_errors", "path": `commodities_${index}_freight_class_error`, error_message:"freight class is required" }),
    weight_uom_error: makeInfo({ valid: true, id: `commodities_${index}_weight_uom_error`, clas: "firstshipper_errors", "path": `commodities_${index}_weight_uom_error`, error_message: "weight unit of measurement is required" }),
    dimension_uom_error: makeInfo({ valid: true, id: `commodities_${index}_dimension_uom_error`, clas: "firstshipper_errors", "path": `commodities_${index}_dimension_uom_error`, error_message: "dimension unit of measurement is required" }),
    commodity_service_error: makeInfo({ valid: true, id: `commodities_${index}_commodity_service_error`, clas: "firstshipper_errors", "path": `commodities_${index}_commodity_service_error` , error_message : "please select commodities services required for shipment"}),
    getLengthErrorID: () => `commodities_${index}_length_error`

  }
  return commodity

}